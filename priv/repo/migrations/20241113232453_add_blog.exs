defmodule Amboseli.Repo.Migrations.AddBlog do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:products) do
      modify :visibility, :text, default: nil
    end

    create table(:posts, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :title, :text, null: false
      add :body, :text, null: false
      add :visibility, :text, default: "public"
      add :page_views, :bigint, default: 0
      add :livemd_url, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "posts_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create table(:post_categories, primary_key: false) do
      add :post_id,
          references(:posts,
            column: :id,
            name: "post_categories_post_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false

      add :category_id, :uuid, null: false, primary_key: true
    end

    create table(:pictures, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :url, :text, null: false
      add :is_approved, :boolean, default: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "pictures_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :post_id,
          references(:posts,
            column: :id,
            name: "pictures_post_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create table(:likes, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "likes_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :post_id,
          references(:posts,
            column: :id,
            name: "likes_post_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )

      add :comment_id, :uuid
    end

    create table(:comments, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:likes) do
      modify :comment_id,
             references(:comments,
               column: :id,
               name: "likes_comment_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:likes, [:user_id, :post_id], name: "likes_unique_user_and_post_index")

    alter table(:comments) do
      add :content, :text, null: false
      add :is_approved, :boolean, default: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :post_id,
          references(:posts,
            column: :id,
            name: "comments_post_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :parent_comment_id,
          references(:comments,
            column: :id,
            name: "comments_parent_comment_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )

      add :user_id,
          references(:users,
            column: :id,
            name: "comments_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create table(:categories, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:post_categories) do
      modify :category_id,
             references(:categories,
               column: :id,
               name: "post_categories_category_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:post_categories, [:post_id, :category_id],
             name: "post_categories_unique_post_category_index"
           )

    alter table(:categories) do
      add :name, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:categories, [:name], name: "categories_unique_name_index")

    create table(:bookmarks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "bookmarks_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :post_id,
          references(:posts,
            column: :id,
            name: "bookmarks_post_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :comment_id,
          references(:comments,
            column: :id,
            name: "bookmarks_comment_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )
    end

    create unique_index(:bookmarks, [:user_id, :post_id],
             name: "bookmarks_unique_user_and_post_index"
           )
  end

  def down do
    drop_if_exists unique_index(:bookmarks, [:user_id, :post_id],
                     name: "bookmarks_unique_user_and_post_index"
                   )

    drop constraint(:bookmarks, "bookmarks_user_id_fkey")

    drop constraint(:bookmarks, "bookmarks_post_id_fkey")

    drop constraint(:bookmarks, "bookmarks_comment_id_fkey")

    drop table(:bookmarks)

    drop_if_exists unique_index(:categories, [:name], name: "categories_unique_name_index")

    alter table(:categories) do
      remove :updated_at
      remove :inserted_at
      remove :name
    end

    drop_if_exists unique_index(:post_categories, [:post_id, :category_id],
                     name: "post_categories_unique_post_category_index"
                   )

    drop constraint(:post_categories, "post_categories_category_id_fkey")

    alter table(:post_categories) do
      modify :category_id, :uuid
    end

    drop table(:categories)

    drop constraint(:comments, "comments_post_id_fkey")

    drop constraint(:comments, "comments_parent_comment_id_fkey")

    drop constraint(:comments, "comments_user_id_fkey")

    alter table(:comments) do
      remove :user_id
      remove :parent_comment_id
      remove :post_id
      remove :updated_at
      remove :inserted_at
      remove :is_approved
      remove :content
    end

    drop_if_exists unique_index(:likes, [:user_id, :post_id],
                     name: "likes_unique_user_and_post_index"
                   )

    drop constraint(:likes, "likes_comment_id_fkey")

    alter table(:likes) do
      modify :comment_id, :uuid
    end

    drop table(:comments)

    drop constraint(:likes, "likes_user_id_fkey")

    drop constraint(:likes, "likes_post_id_fkey")

    drop table(:likes)

    drop constraint(:pictures, "pictures_user_id_fkey")

    drop constraint(:pictures, "pictures_post_id_fkey")

    drop table(:pictures)

    drop constraint(:post_categories, "post_categories_post_id_fkey")

    drop table(:post_categories)

    drop constraint(:posts, "posts_user_id_fkey")

    drop table(:posts)

    alter table(:products) do
      modify :visibility, :text, default: "public"
    end
  end
end
