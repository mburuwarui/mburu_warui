defmodule Amboseli.Repo.Migrations.ChangePostToNotebook do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    rename table(:pictures), :post_id, to: :notebook_id

    drop constraint(:pictures, "pictures_post_id_fkey")

    create table(:notebooks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:pictures) do
      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "pictures_notebook_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    alter table(:notebooks) do
      add :title, :text, null: false
      add :body, :text, null: false
      add :visibility, :text, default: "public"
      add :page_views, :bigint, default: 0
      add :livemd_url, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "notebooks_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create table(:notebook_categories, primary_key: false) do
      add :notebook_id,
          references(:notebooks,
            column: :id,
            name: "notebook_categories_notebook_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false

      add :category_id,
          references(:categories,
            column: :id,
            name: "notebook_categories_category_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false
    end

    create unique_index(:notebook_categories, [:notebook_id, :category_id],
             name: "notebook_categories_unique_notebook_category_index"
           )

    rename table(:likes), :post_id, to: :notebook_id

    drop constraint(:likes, "likes_post_id_fkey")

    drop_if_exists unique_index(:likes, [:user_id, :post_id],
                     name: "likes_unique_user_and_post_index"
                   )

    alter table(:likes) do
      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "likes_notebook_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:likes, [:user_id, :notebook_id],
             name: "likes_unique_user_and_notebook_index"
           )

    rename table(:comments), :post_id, to: :notebook_id

    drop constraint(:comments, "comments_post_id_fkey")

    alter table(:comments) do
      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "comments_notebook_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    rename table(:bookmarks), :post_id, to: :notebook_id

    drop constraint(:bookmarks, "bookmarks_post_id_fkey")

    drop_if_exists unique_index(:bookmarks, [:user_id, :post_id],
                     name: "bookmarks_unique_user_and_post_index"
                   )

    alter table(:bookmarks) do
      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "bookmarks_notebook_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:bookmarks, [:user_id, :notebook_id],
             name: "bookmarks_unique_user_and_notebook_index"
           )
  end

  def down do
    drop_if_exists unique_index(:bookmarks, [:user_id, :notebook_id],
                     name: "bookmarks_unique_user_and_notebook_index"
                   )

    drop constraint(:bookmarks, "bookmarks_notebook_id_fkey")

    alter table(:bookmarks) do
      modify :post_id,
             references(:posts,
               column: :id,
               name: "bookmarks_post_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:bookmarks, [:user_id, :post_id],
             name: "bookmarks_unique_user_and_post_index"
           )

    rename table(:bookmarks), :notebook_id, to: :post_id

    drop constraint(:comments, "comments_notebook_id_fkey")

    alter table(:comments) do
      modify :post_id,
             references(:posts,
               column: :id,
               name: "comments_post_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    rename table(:comments), :notebook_id, to: :post_id

    drop_if_exists unique_index(:likes, [:user_id, :notebook_id],
                     name: "likes_unique_user_and_notebook_index"
                   )

    drop constraint(:likes, "likes_notebook_id_fkey")

    alter table(:likes) do
      modify :post_id,
             references(:posts,
               column: :id,
               name: "likes_post_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:likes, [:user_id, :post_id], name: "likes_unique_user_and_post_index")

    rename table(:likes), :notebook_id, to: :post_id

    drop_if_exists unique_index(:notebook_categories, [:notebook_id, :category_id],
                     name: "notebook_categories_unique_notebook_category_index"
                   )

    drop constraint(:notebook_categories, "notebook_categories_notebook_id_fkey")

    drop constraint(:notebook_categories, "notebook_categories_category_id_fkey")

    drop table(:notebook_categories)

    drop constraint(:notebooks, "notebooks_user_id_fkey")

    alter table(:notebooks) do
      remove :user_id
      remove :updated_at
      remove :inserted_at
      remove :livemd_url
      remove :page_views
      remove :visibility
      remove :body
      remove :title
    end

    drop constraint(:pictures, "pictures_notebook_id_fkey")

    alter table(:pictures) do
      modify :post_id,
             references(:posts,
               column: :id,
               name: "pictures_post_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    drop table(:notebooks)

    rename table(:pictures), :notebook_id, to: :post_id
  end
end
