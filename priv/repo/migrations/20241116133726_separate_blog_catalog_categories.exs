defmodule Amboseli.Repo.Migrations.SeparateBlogCatalogCategories do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    drop constraint(:notebook_categories, "notebook_categories_category_id_fkey")

    create table(:catalog_categories, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :description, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:catalog_categories, [:name],
             name: "catalog_categories_unique_name_index"
           )

    create table(:blog_categories, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:notebook_categories) do
      modify :category_id,
             references(:blog_categories,
               column: :id,
               name: "notebook_categories_category_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    alter table(:blog_categories) do
      add :name, :text, null: false
      add :description, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:blog_categories, [:name], name: "blog_categories_unique_name_index")

    drop constraint(:app_categories, "app_categories_category_id_fkey")

    alter table(:app_categories) do
      modify :category_id,
             references(:catalog_categories,
               column: :id,
               name: "app_categories_category_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end
  end

  def down do
    drop constraint(:app_categories, "app_categories_category_id_fkey")

    alter table(:app_categories) do
      modify :category_id,
             references(:categories,
               column: :id,
               name: "app_categories_category_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    drop_if_exists unique_index(:blog_categories, [:name],
                     name: "blog_categories_unique_name_index"
                   )

    alter table(:blog_categories) do
      remove :updated_at
      remove :inserted_at
      remove :description
      remove :name
    end

    drop constraint(:notebook_categories, "notebook_categories_category_id_fkey")

    alter table(:notebook_categories) do
      modify :category_id,
             references(:categories,
               column: :id,
               name: "notebook_categories_category_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    drop table(:blog_categories)

    drop_if_exists unique_index(:catalog_categories, [:name],
                     name: "catalog_categories_unique_name_index"
                   )

    drop table(:catalog_categories)
  end
end
